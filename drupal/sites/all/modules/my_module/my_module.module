<?php

/**
 * @file
 * A module for the 2013 DrupalCon Portland's PHP for NonProgrammers training.
 */

/**
 * Implements hook_menu().
 *
 * Provides a default page to explain what this module does.
 */
function my_module_menu() {
  $items['training/my-block'] = array(
    'page callback' => 'my_module_page',
    'access callback' => TRUE,
    'title' => 'My Block',
  );
  return $items;
}

/**
 * Simple page function to explain what the block is about.
 */
function my_module_page() {
  $page = array(
    '#type' => 'markup',
    '#markup' => t('This block is built with the my_module module, developed during training. To experiment with the block, enable and configure it on <a href="@url">the block admin page</a>.', array('@url' => url('admin/structure/block'))),
  );
  return $page;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function my_module_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Many options are defined in hook_block_info():
  $blocks['my_block_text'] = array(
    // info: The name of the block.
    'info' => t('My block in my module'),
    // Block caching options (per role, per user, etc.)
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );
  
  $blocks['my_block_more_text'] = array(
    'info' => t('Another block in my module'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function my_module_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'my_block_text':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supersedes this one.
      $block['subject'] = t('Title of my block');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = my_block_contents($delta);
      break;
    case 'my_block_more_text':
      $block['subject'] = t('Title of another block');
      $block['content'] = my_block_contents($delta);
      break;
  }
  
  return $block;
}

/**
 * A module-defined block content function.
 */
function my_block_contents($which_block) {
  switch ($which_block) {
    case 'my_block_text':
      return t('Content for my block. This block has the delta %delta', array('%delta' => $which_block));
    case 'my_block_more_text':
      return t('More content for my other block. This block has the delta %delta', array('%delta' => $which_block));
  }
}